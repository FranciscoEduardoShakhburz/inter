'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ProduccionInterfletdbReportes"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ProduccionInterfletdbReportes
    Inherits Global.System.Data.DataSet
    
    Private tableUP_PruebaReporte As UP_PruebaReporteDataTable
    
    Private tableUP_ReporteReset As UP_ReporteResetDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UP_PruebaReporte")) Is Nothing) Then
                MyBase.Tables.Add(New UP_PruebaReporteDataTable(ds.Tables("UP_PruebaReporte")))
            End If
            If (Not (ds.Tables("UP_ReporteReset")) Is Nothing) Then
                MyBase.Tables.Add(New UP_ReporteResetDataTable(ds.Tables("UP_ReporteReset")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UP_PruebaReporte() As UP_PruebaReporteDataTable
        Get
            Return Me.tableUP_PruebaReporte
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UP_ReporteReset() As UP_ReporteResetDataTable
        Get
            Return Me.tableUP_ReporteReset
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ProduccionInterfletdbReportes = CType(MyBase.Clone,ProduccionInterfletdbReportes)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("UP_PruebaReporte")) Is Nothing) Then
                MyBase.Tables.Add(New UP_PruebaReporteDataTable(ds.Tables("UP_PruebaReporte")))
            End If
            If (Not (ds.Tables("UP_ReporteReset")) Is Nothing) Then
                MyBase.Tables.Add(New UP_ReporteResetDataTable(ds.Tables("UP_ReporteReset")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableUP_PruebaReporte = CType(MyBase.Tables("UP_PruebaReporte"),UP_PruebaReporteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUP_PruebaReporte) Is Nothing) Then
                Me.tableUP_PruebaReporte.InitVars
            End If
        End If
        Me.tableUP_ReporteReset = CType(MyBase.Tables("UP_ReporteReset"),UP_ReporteResetDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUP_ReporteReset) Is Nothing) Then
                Me.tableUP_ReporteReset.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ProduccionInterfletdbReportes"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ProduccionInterfletdbReportes.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableUP_PruebaReporte = New UP_PruebaReporteDataTable
        MyBase.Tables.Add(Me.tableUP_PruebaReporte)
        Me.tableUP_ReporteReset = New UP_ReporteResetDataTable
        MyBase.Tables.Add(Me.tableUP_ReporteReset)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUP_PruebaReporte() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUP_ReporteReset() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ProduccionInterfletdbReportes = New ProduccionInterfletdbReportes
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub UP_PruebaReporteRowChangeEventHandler(ByVal sender As Object, ByVal e As UP_PruebaReporteRowChangeEvent)
    
    Public Delegate Sub UP_ReporteResetRowChangeEventHandler(ByVal sender As Object, ByVal e As UP_ReporteResetRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UP_PruebaReporteDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnid_insumo As Global.System.Data.DataColumn
        
        Private columnid_concepto As Global.System.Data.DataColumn
        
        Private columnid_articulo As Global.System.Data.DataColumn
        
        Private columndescripcion As Global.System.Data.DataColumn
        
        Private columnid_familia As Global.System.Data.DataColumn
        
        Private columnunidad_medida As Global.System.Data.DataColumn
        
        Private columnprecio_total As Global.System.Data.DataColumn
        
        Private columnfecha As Global.System.Data.DataColumn
        
        Private columncontrolado As Global.System.Data.DataColumn
        
        Private columnclave_fabrica As Global.System.Data.DataColumn
        
        Private columnid_subfamilia As Global.System.Data.DataColumn
        
        Private columnf_alta As Global.System.Data.DataColumn
        
        Private columnid_ingreso As Global.System.Data.DataColumn
        
        Private columnimp_negocio As Global.System.Data.DataColumn
        
        Private columnries_abast As Global.System.Data.DataColumn
        
        Private columnranq_concept1 As Global.System.Data.DataColumn
        
        Private columnranq_concept2 As Global.System.Data.DataColumn
        
        Private columnranq_concept3 As Global.System.Data.DataColumn
        
        Private columnranq_concept4 As Global.System.Data.DataColumn
        
        Private columnranq_concept5 As Global.System.Data.DataColumn
        
        Private columnid_tipo_moneda As Global.System.Data.DataColumn
        
        Private columnsegunda_um As Global.System.Data.DataColumn
        
        Private columnconversion_um As Global.System.Data.DataColumn
        
        Private columnredondeo_um As Global.System.Data.DataColumn
        
        Private columnid_tipoinsumo As Global.System.Data.DataColumn
        
        Private columnid_grupoinsumo As Global.System.Data.DataColumn
        
        Private columnid_subgrupoinsumo As Global.System.Data.DataColumn
        
        Private columnredondeo As Global.System.Data.DataColumn
        
        Private columnestatus As Global.System.Data.DataColumn
        
        Private columnfecha_baja As Global.System.Data.DataColumn
        
        Private columnid_ingresobaja As Global.System.Data.DataColumn
        
        Private columnobservaciones As Global.System.Data.DataColumn
        
        Private columncomodin As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UP_PruebaReporte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_insumoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_insumo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_conceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_concepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_articuloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_articulo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_familiaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_familia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property unidad_medidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunidad_medida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property precio_totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprecio_total
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property controladoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontrolado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property clave_fabricaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnclave_fabrica
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_subfamiliaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_subfamilia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property f_altaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnf_alta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_ingresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_ingreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property imp_negocioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimp_negocio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ries_abastColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnries_abast
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ranq_concept1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnranq_concept1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ranq_concept2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnranq_concept2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ranq_concept3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnranq_concept3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ranq_concept4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnranq_concept4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ranq_concept5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnranq_concept5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_tipo_monedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_tipo_moneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property segunda_umColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsegunda_um
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property conversion_umColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnconversion_um
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property redondeo_umColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnredondeo_um
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_tipoinsumoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_tipoinsumo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_grupoinsumoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_grupoinsumo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_subgrupoinsumoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_subgrupoinsumo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property redondeoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnredondeo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fecha_bajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha_baja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_ingresobajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_ingresobaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property observacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnobservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property comodinColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncomodin
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UP_PruebaReporteRow
            Get
                Return CType(Me.Rows(index),UP_PruebaReporteRow)
            End Get
        End Property
        
        Public Event UP_PruebaReporteRowChanging As UP_PruebaReporteRowChangeEventHandler
        
        Public Event UP_PruebaReporteRowChanged As UP_PruebaReporteRowChangeEventHandler
        
        Public Event UP_PruebaReporteRowDeleting As UP_PruebaReporteRowChangeEventHandler
        
        Public Event UP_PruebaReporteRowDeleted As UP_PruebaReporteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUP_PruebaReporteRow(ByVal row As UP_PruebaReporteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUP_PruebaReporteRow( _
                    ByVal id_insumo As String,  _
                    ByVal id_concepto As Integer,  _
                    ByVal id_articulo As Integer,  _
                    ByVal descripcion As String,  _
                    ByVal id_familia As Integer,  _
                    ByVal unidad_medida As String,  _
                    ByVal precio_total As Decimal,  _
                    ByVal fecha As Date,  _
                    ByVal controlado As String,  _
                    ByVal clave_fabrica As String,  _
                    ByVal id_subfamilia As Integer,  _
                    ByVal f_alta As Date,  _
                    ByVal id_ingreso As String,  _
                    ByVal imp_negocio As Integer,  _
                    ByVal ries_abast As Integer,  _
                    ByVal ranq_concept1 As Integer,  _
                    ByVal ranq_concept2 As Integer,  _
                    ByVal ranq_concept3 As Integer,  _
                    ByVal ranq_concept4 As Integer,  _
                    ByVal ranq_concept5 As Integer,  _
                    ByVal id_tipo_moneda As Integer,  _
                    ByVal segunda_um As String,  _
                    ByVal conversion_um As Decimal,  _
                    ByVal redondeo_um As String,  _
                    ByVal id_tipoinsumo As Integer,  _
                    ByVal id_grupoinsumo As Integer,  _
                    ByVal id_subgrupoinsumo As Integer,  _
                    ByVal redondeo As Integer,  _
                    ByVal estatus As Integer,  _
                    ByVal fecha_baja As Date,  _
                    ByVal id_ingresobaja As String,  _
                    ByVal observaciones As String,  _
                    ByVal comodin As String) As UP_PruebaReporteRow
            Dim rowUP_PruebaReporteRow As UP_PruebaReporteRow = CType(Me.NewRow,UP_PruebaReporteRow)
            Dim columnValuesArray() As Object = New Object() {id_insumo, id_concepto, id_articulo, descripcion, id_familia, unidad_medida, precio_total, fecha, controlado, clave_fabrica, id_subfamilia, f_alta, id_ingreso, imp_negocio, ries_abast, ranq_concept1, ranq_concept2, ranq_concept3, ranq_concept4, ranq_concept5, id_tipo_moneda, segunda_um, conversion_um, redondeo_um, id_tipoinsumo, id_grupoinsumo, id_subgrupoinsumo, redondeo, estatus, fecha_baja, id_ingresobaja, observaciones, comodin}
            rowUP_PruebaReporteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUP_PruebaReporteRow)
            Return rowUP_PruebaReporteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByid_insumo(ByVal id_insumo As String) As UP_PruebaReporteRow
            Return CType(Me.Rows.Find(New Object() {id_insumo}),UP_PruebaReporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UP_PruebaReporteDataTable = CType(MyBase.Clone,UP_PruebaReporteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UP_PruebaReporteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnid_insumo = MyBase.Columns("id_insumo")
            Me.columnid_concepto = MyBase.Columns("id_concepto")
            Me.columnid_articulo = MyBase.Columns("id_articulo")
            Me.columndescripcion = MyBase.Columns("descripcion")
            Me.columnid_familia = MyBase.Columns("id_familia")
            Me.columnunidad_medida = MyBase.Columns("unidad_medida")
            Me.columnprecio_total = MyBase.Columns("precio_total")
            Me.columnfecha = MyBase.Columns("fecha")
            Me.columncontrolado = MyBase.Columns("controlado")
            Me.columnclave_fabrica = MyBase.Columns("clave_fabrica")
            Me.columnid_subfamilia = MyBase.Columns("id_subfamilia")
            Me.columnf_alta = MyBase.Columns("f_alta")
            Me.columnid_ingreso = MyBase.Columns("id_ingreso")
            Me.columnimp_negocio = MyBase.Columns("imp_negocio")
            Me.columnries_abast = MyBase.Columns("ries_abast")
            Me.columnranq_concept1 = MyBase.Columns("ranq_concept1")
            Me.columnranq_concept2 = MyBase.Columns("ranq_concept2")
            Me.columnranq_concept3 = MyBase.Columns("ranq_concept3")
            Me.columnranq_concept4 = MyBase.Columns("ranq_concept4")
            Me.columnranq_concept5 = MyBase.Columns("ranq_concept5")
            Me.columnid_tipo_moneda = MyBase.Columns("id_tipo_moneda")
            Me.columnsegunda_um = MyBase.Columns("segunda_um")
            Me.columnconversion_um = MyBase.Columns("conversion_um")
            Me.columnredondeo_um = MyBase.Columns("redondeo_um")
            Me.columnid_tipoinsumo = MyBase.Columns("id_tipoinsumo")
            Me.columnid_grupoinsumo = MyBase.Columns("id_grupoinsumo")
            Me.columnid_subgrupoinsumo = MyBase.Columns("id_subgrupoinsumo")
            Me.columnredondeo = MyBase.Columns("redondeo")
            Me.columnestatus = MyBase.Columns("estatus")
            Me.columnfecha_baja = MyBase.Columns("fecha_baja")
            Me.columnid_ingresobaja = MyBase.Columns("id_ingresobaja")
            Me.columnobservaciones = MyBase.Columns("observaciones")
            Me.columncomodin = MyBase.Columns("comodin")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnid_insumo = New Global.System.Data.DataColumn("id_insumo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_insumo)
            Me.columnid_concepto = New Global.System.Data.DataColumn("id_concepto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_concepto)
            Me.columnid_articulo = New Global.System.Data.DataColumn("id_articulo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_articulo)
            Me.columndescripcion = New Global.System.Data.DataColumn("descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcion)
            Me.columnid_familia = New Global.System.Data.DataColumn("id_familia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_familia)
            Me.columnunidad_medida = New Global.System.Data.DataColumn("unidad_medida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunidad_medida)
            Me.columnprecio_total = New Global.System.Data.DataColumn("precio_total", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprecio_total)
            Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha)
            Me.columncontrolado = New Global.System.Data.DataColumn("controlado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontrolado)
            Me.columnclave_fabrica = New Global.System.Data.DataColumn("clave_fabrica", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnclave_fabrica)
            Me.columnid_subfamilia = New Global.System.Data.DataColumn("id_subfamilia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_subfamilia)
            Me.columnf_alta = New Global.System.Data.DataColumn("f_alta", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnf_alta)
            Me.columnid_ingreso = New Global.System.Data.DataColumn("id_ingreso", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_ingreso)
            Me.columnimp_negocio = New Global.System.Data.DataColumn("imp_negocio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimp_negocio)
            Me.columnries_abast = New Global.System.Data.DataColumn("ries_abast", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnries_abast)
            Me.columnranq_concept1 = New Global.System.Data.DataColumn("ranq_concept1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnranq_concept1)
            Me.columnranq_concept2 = New Global.System.Data.DataColumn("ranq_concept2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnranq_concept2)
            Me.columnranq_concept3 = New Global.System.Data.DataColumn("ranq_concept3", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnranq_concept3)
            Me.columnranq_concept4 = New Global.System.Data.DataColumn("ranq_concept4", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnranq_concept4)
            Me.columnranq_concept5 = New Global.System.Data.DataColumn("ranq_concept5", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnranq_concept5)
            Me.columnid_tipo_moneda = New Global.System.Data.DataColumn("id_tipo_moneda", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_tipo_moneda)
            Me.columnsegunda_um = New Global.System.Data.DataColumn("segunda_um", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsegunda_um)
            Me.columnconversion_um = New Global.System.Data.DataColumn("conversion_um", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnconversion_um)
            Me.columnredondeo_um = New Global.System.Data.DataColumn("redondeo_um", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnredondeo_um)
            Me.columnid_tipoinsumo = New Global.System.Data.DataColumn("id_tipoinsumo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_tipoinsumo)
            Me.columnid_grupoinsumo = New Global.System.Data.DataColumn("id_grupoinsumo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_grupoinsumo)
            Me.columnid_subgrupoinsumo = New Global.System.Data.DataColumn("id_subgrupoinsumo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_subgrupoinsumo)
            Me.columnredondeo = New Global.System.Data.DataColumn("redondeo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnredondeo)
            Me.columnestatus = New Global.System.Data.DataColumn("estatus", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestatus)
            Me.columnfecha_baja = New Global.System.Data.DataColumn("fecha_baja", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha_baja)
            Me.columnid_ingresobaja = New Global.System.Data.DataColumn("id_ingresobaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_ingresobaja)
            Me.columnobservaciones = New Global.System.Data.DataColumn("observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnobservaciones)
            Me.columncomodin = New Global.System.Data.DataColumn("comodin", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncomodin)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid_insumo}, true))
            Me.columnid_insumo.AllowDBNull = false
            Me.columnid_insumo.Unique = true
            Me.columnid_insumo.MaxLength = 10
            Me.columnid_concepto.AllowDBNull = false
            Me.columnid_articulo.AllowDBNull = false
            Me.columndescripcion.AllowDBNull = false
            Me.columndescripcion.MaxLength = 100
            Me.columnid_familia.AllowDBNull = false
            Me.columnunidad_medida.AllowDBNull = false
            Me.columnunidad_medida.MaxLength = 3
            Me.columncontrolado.MaxLength = 1
            Me.columnclave_fabrica.MaxLength = 40
            Me.columnid_subfamilia.AllowDBNull = false
            Me.columnid_ingreso.MaxLength = 8
            Me.columnsegunda_um.AllowDBNull = false
            Me.columnsegunda_um.MaxLength = 3
            Me.columnconversion_um.AllowDBNull = false
            Me.columnredondeo_um.MaxLength = 1
            Me.columnestatus.AllowDBNull = false
            Me.columnid_ingresobaja.MaxLength = 15
            Me.columnobservaciones.MaxLength = 254
            Me.columncomodin.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUP_PruebaReporteRow() As UP_PruebaReporteRow
            Return CType(Me.NewRow,UP_PruebaReporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UP_PruebaReporteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UP_PruebaReporteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UP_PruebaReporteRowChangedEvent) Is Nothing) Then
                RaiseEvent UP_PruebaReporteRowChanged(Me, New UP_PruebaReporteRowChangeEvent(CType(e.Row,UP_PruebaReporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UP_PruebaReporteRowChangingEvent) Is Nothing) Then
                RaiseEvent UP_PruebaReporteRowChanging(Me, New UP_PruebaReporteRowChangeEvent(CType(e.Row,UP_PruebaReporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UP_PruebaReporteRowDeletedEvent) Is Nothing) Then
                RaiseEvent UP_PruebaReporteRowDeleted(Me, New UP_PruebaReporteRowChangeEvent(CType(e.Row,UP_PruebaReporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UP_PruebaReporteRowDeletingEvent) Is Nothing) Then
                RaiseEvent UP_PruebaReporteRowDeleting(Me, New UP_PruebaReporteRowChangeEvent(CType(e.Row,UP_PruebaReporteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUP_PruebaReporteRow(ByVal row As UP_PruebaReporteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProduccionInterfletdbReportes = New ProduccionInterfletdbReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UP_PruebaReporteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UP_ReporteResetDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDesc_DatoReset As Global.System.Data.DataColumn
        
        Private columnValor As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UP_ReporteReset"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Desc_DatoResetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDesc_DatoReset
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UP_ReporteResetRow
            Get
                Return CType(Me.Rows(index),UP_ReporteResetRow)
            End Get
        End Property
        
        Public Event UP_ReporteResetRowChanging As UP_ReporteResetRowChangeEventHandler
        
        Public Event UP_ReporteResetRowChanged As UP_ReporteResetRowChangeEventHandler
        
        Public Event UP_ReporteResetRowDeleting As UP_ReporteResetRowChangeEventHandler
        
        Public Event UP_ReporteResetRowDeleted As UP_ReporteResetRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUP_ReporteResetRow(ByVal row As UP_ReporteResetRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUP_ReporteResetRow(ByVal Desc_DatoReset As String, ByVal Valor As String, ByVal Tipo As Integer) As UP_ReporteResetRow
            Dim rowUP_ReporteResetRow As UP_ReporteResetRow = CType(Me.NewRow,UP_ReporteResetRow)
            Dim columnValuesArray() As Object = New Object() {Desc_DatoReset, Valor, Tipo}
            rowUP_ReporteResetRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUP_ReporteResetRow)
            Return rowUP_ReporteResetRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UP_ReporteResetDataTable = CType(MyBase.Clone,UP_ReporteResetDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UP_ReporteResetDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDesc_DatoReset = MyBase.Columns("Desc_DatoReset")
            Me.columnValor = MyBase.Columns("Valor")
            Me.columnTipo = MyBase.Columns("Tipo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDesc_DatoReset = New Global.System.Data.DataColumn("Desc_DatoReset", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDesc_DatoReset)
            Me.columnValor = New Global.System.Data.DataColumn("Valor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnDesc_DatoReset.ReadOnly = true
            Me.columnDesc_DatoReset.MaxLength = 70
            Me.columnValor.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUP_ReporteResetRow() As UP_ReporteResetRow
            Return CType(Me.NewRow,UP_ReporteResetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UP_ReporteResetRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UP_ReporteResetRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UP_ReporteResetRowChangedEvent) Is Nothing) Then
                RaiseEvent UP_ReporteResetRowChanged(Me, New UP_ReporteResetRowChangeEvent(CType(e.Row,UP_ReporteResetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UP_ReporteResetRowChangingEvent) Is Nothing) Then
                RaiseEvent UP_ReporteResetRowChanging(Me, New UP_ReporteResetRowChangeEvent(CType(e.Row,UP_ReporteResetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UP_ReporteResetRowDeletedEvent) Is Nothing) Then
                RaiseEvent UP_ReporteResetRowDeleted(Me, New UP_ReporteResetRowChangeEvent(CType(e.Row,UP_ReporteResetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UP_ReporteResetRowDeletingEvent) Is Nothing) Then
                RaiseEvent UP_ReporteResetRowDeleting(Me, New UP_ReporteResetRowChangeEvent(CType(e.Row,UP_ReporteResetRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUP_ReporteResetRow(ByVal row As UP_ReporteResetRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ProduccionInterfletdbReportes = New ProduccionInterfletdbReportes
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UP_ReporteResetDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UP_PruebaReporteRow
        Inherits Global.System.Data.DataRow
        
        Private tableUP_PruebaReporte As UP_PruebaReporteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUP_PruebaReporte = CType(Me.Table,UP_PruebaReporteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_insumo() As String
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.id_insumoColumn),String)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_insumoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_concepto() As Integer
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.id_conceptoColumn),Integer)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_conceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_articulo() As Integer
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.id_articuloColumn),Integer)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_articuloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcion() As String
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.descripcionColumn),String)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.descripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_familia() As Integer
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.id_familiaColumn),Integer)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_familiaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property unidad_medida() As String
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.unidad_medidaColumn),String)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.unidad_medidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property precio_total() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.precio_totalColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'precio_total' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.precio_totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.fechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecha' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.fechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property controlado() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.controladoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'controlado' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.controladoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property clave_fabrica() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.clave_fabricaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'clave_fabrica' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.clave_fabricaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_subfamilia() As Integer
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.id_subfamiliaColumn),Integer)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_subfamiliaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property f_alta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.f_altaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'f_alta' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.f_altaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_ingreso() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.id_ingresoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_ingreso' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_ingresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property imp_negocio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.imp_negocioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'imp_negocio' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.imp_negocioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ries_abast() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.ries_abastColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ries_abast' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.ries_abastColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ranq_concept1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.ranq_concept1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ranq_concept1' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.ranq_concept1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ranq_concept2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.ranq_concept2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ranq_concept2' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.ranq_concept2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ranq_concept3() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.ranq_concept3Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ranq_concept3' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.ranq_concept3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ranq_concept4() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.ranq_concept4Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ranq_concept4' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.ranq_concept4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ranq_concept5() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.ranq_concept5Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ranq_concept5' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.ranq_concept5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_tipo_moneda() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.id_tipo_monedaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_tipo_moneda' de la tabla 'UP_PruebaReporte' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_tipo_monedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property segunda_um() As String
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.segunda_umColumn),String)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.segunda_umColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property conversion_um() As Decimal
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.conversion_umColumn),Decimal)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.conversion_umColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property redondeo_um() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.redondeo_umColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'redondeo_um' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.redondeo_umColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_tipoinsumo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.id_tipoinsumoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_tipoinsumo' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_tipoinsumoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_grupoinsumo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.id_grupoinsumoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_grupoinsumo' de la tabla 'UP_PruebaReporte' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_grupoinsumoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_subgrupoinsumo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.id_subgrupoinsumoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_subgrupoinsumo' de la tabla 'UP_PruebaReporte' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_subgrupoinsumoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property redondeo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.redondeoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'redondeo' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.redondeoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estatus() As Integer
            Get
                Return CType(Me(Me.tableUP_PruebaReporte.estatusColumn),Integer)
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.estatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha_baja() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.fecha_bajaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecha_baja' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.fecha_bajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_ingresobaja() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.id_ingresobajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_ingresobaja' de la tabla 'UP_PruebaReporte' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.id_ingresobajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.observacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'observaciones' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.observacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property comodin() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_PruebaReporte.comodinColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'comodin' de la tabla 'UP_PruebaReporte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_PruebaReporte.comodinColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isprecio_totalNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.precio_totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setprecio_totalNull()
            Me(Me.tableUP_PruebaReporte.precio_totalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.fechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaNull()
            Me(Me.tableUP_PruebaReporte.fechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscontroladoNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.controladoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcontroladoNull()
            Me(Me.tableUP_PruebaReporte.controladoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isclave_fabricaNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.clave_fabricaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setclave_fabricaNull()
            Me(Me.tableUP_PruebaReporte.clave_fabricaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isf_altaNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.f_altaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setf_altaNull()
            Me(Me.tableUP_PruebaReporte.f_altaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_ingresoNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.id_ingresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_ingresoNull()
            Me(Me.tableUP_PruebaReporte.id_ingresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isimp_negocioNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.imp_negocioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setimp_negocioNull()
            Me(Me.tableUP_PruebaReporte.imp_negocioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isries_abastNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.ries_abastColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setries_abastNull()
            Me(Me.tableUP_PruebaReporte.ries_abastColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isranq_concept1Null() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.ranq_concept1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setranq_concept1Null()
            Me(Me.tableUP_PruebaReporte.ranq_concept1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isranq_concept2Null() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.ranq_concept2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setranq_concept2Null()
            Me(Me.tableUP_PruebaReporte.ranq_concept2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isranq_concept3Null() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.ranq_concept3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setranq_concept3Null()
            Me(Me.tableUP_PruebaReporte.ranq_concept3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isranq_concept4Null() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.ranq_concept4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setranq_concept4Null()
            Me(Me.tableUP_PruebaReporte.ranq_concept4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isranq_concept5Null() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.ranq_concept5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setranq_concept5Null()
            Me(Me.tableUP_PruebaReporte.ranq_concept5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_tipo_monedaNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.id_tipo_monedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_tipo_monedaNull()
            Me(Me.tableUP_PruebaReporte.id_tipo_monedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isredondeo_umNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.redondeo_umColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setredondeo_umNull()
            Me(Me.tableUP_PruebaReporte.redondeo_umColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_tipoinsumoNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.id_tipoinsumoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_tipoinsumoNull()
            Me(Me.tableUP_PruebaReporte.id_tipoinsumoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_grupoinsumoNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.id_grupoinsumoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_grupoinsumoNull()
            Me(Me.tableUP_PruebaReporte.id_grupoinsumoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_subgrupoinsumoNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.id_subgrupoinsumoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_subgrupoinsumoNull()
            Me(Me.tableUP_PruebaReporte.id_subgrupoinsumoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsredondeoNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.redondeoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetredondeoNull()
            Me(Me.tableUP_PruebaReporte.redondeoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isfecha_bajaNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.fecha_bajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setfecha_bajaNull()
            Me(Me.tableUP_PruebaReporte.fecha_bajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_ingresobajaNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.id_ingresobajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_ingresobajaNull()
            Me(Me.tableUP_PruebaReporte.id_ingresobajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsobservacionesNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.observacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetobservacionesNull()
            Me(Me.tableUP_PruebaReporte.observacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscomodinNull() As Boolean
            Return Me.IsNull(Me.tableUP_PruebaReporte.comodinColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcomodinNull()
            Me(Me.tableUP_PruebaReporte.comodinColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UP_ReporteResetRow
        Inherits Global.System.Data.DataRow
        
        Private tableUP_ReporteReset As UP_ReporteResetDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUP_ReporteReset = CType(Me.Table,UP_ReporteResetDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Desc_DatoReset() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_ReporteReset.Desc_DatoResetColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Desc_DatoReset' de la tabla 'UP_ReporteReset' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_ReporteReset.Desc_DatoResetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_ReporteReset.ValorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Valor' de la tabla 'UP_ReporteReset' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_ReporteReset.ValorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUP_ReporteReset.TipoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'UP_ReporteReset' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_ReporteReset.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDesc_DatoResetNull() As Boolean
            Return Me.IsNull(Me.tableUP_ReporteReset.Desc_DatoResetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDesc_DatoResetNull()
            Me(Me.tableUP_ReporteReset.Desc_DatoResetColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValorNull() As Boolean
            Return Me.IsNull(Me.tableUP_ReporteReset.ValorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValorNull()
            Me(Me.tableUP_ReporteReset.ValorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableUP_ReporteReset.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableUP_ReporteReset.TipoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UP_PruebaReporteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UP_PruebaReporteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UP_PruebaReporteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UP_PruebaReporteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UP_ReporteResetRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UP_ReporteResetRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UP_ReporteResetRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UP_ReporteResetRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ProduccionInterfletdbReportesTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UP_PruebaReporteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UP_PruebaReporte"
            tableMapping.ColumnMappings.Add("id_insumo", "id_insumo")
            tableMapping.ColumnMappings.Add("id_concepto", "id_concepto")
            tableMapping.ColumnMappings.Add("id_articulo", "id_articulo")
            tableMapping.ColumnMappings.Add("descripcion", "descripcion")
            tableMapping.ColumnMappings.Add("id_familia", "id_familia")
            tableMapping.ColumnMappings.Add("unidad_medida", "unidad_medida")
            tableMapping.ColumnMappings.Add("precio_total", "precio_total")
            tableMapping.ColumnMappings.Add("fecha", "fecha")
            tableMapping.ColumnMappings.Add("controlado", "controlado")
            tableMapping.ColumnMappings.Add("clave_fabrica", "clave_fabrica")
            tableMapping.ColumnMappings.Add("id_subfamilia", "id_subfamilia")
            tableMapping.ColumnMappings.Add("f_alta", "f_alta")
            tableMapping.ColumnMappings.Add("id_ingreso", "id_ingreso")
            tableMapping.ColumnMappings.Add("imp_negocio", "imp_negocio")
            tableMapping.ColumnMappings.Add("ries_abast", "ries_abast")
            tableMapping.ColumnMappings.Add("ranq_concept1", "ranq_concept1")
            tableMapping.ColumnMappings.Add("ranq_concept2", "ranq_concept2")
            tableMapping.ColumnMappings.Add("ranq_concept3", "ranq_concept3")
            tableMapping.ColumnMappings.Add("ranq_concept4", "ranq_concept4")
            tableMapping.ColumnMappings.Add("ranq_concept5", "ranq_concept5")
            tableMapping.ColumnMappings.Add("id_tipo_moneda", "id_tipo_moneda")
            tableMapping.ColumnMappings.Add("segunda_um", "segunda_um")
            tableMapping.ColumnMappings.Add("conversion_um", "conversion_um")
            tableMapping.ColumnMappings.Add("redondeo_um", "redondeo_um")
            tableMapping.ColumnMappings.Add("id_tipoinsumo", "id_tipoinsumo")
            tableMapping.ColumnMappings.Add("id_grupoinsumo", "id_grupoinsumo")
            tableMapping.ColumnMappings.Add("id_subgrupoinsumo", "id_subgrupoinsumo")
            tableMapping.ColumnMappings.Add("redondeo", "redondeo")
            tableMapping.ColumnMappings.Add("estatus", "estatus")
            tableMapping.ColumnMappings.Add("fecha_baja", "fecha_baja")
            tableMapping.ColumnMappings.Add("id_ingresobaja", "id_ingresobaja")
            tableMapping.ColumnMappings.Add("observaciones", "observaciones")
            tableMapping.ColumnMappings.Add("comodin", "comodin")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Interflet.MySettings.Default.ProduccionInterfletdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.UP_PruebaReporte"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProduccionInterfletdbReportes.UP_PruebaReporteDataTable, ByVal p1 As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (p1.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(p1.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UP_ReporteResetTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UP_ReporteReset"
            tableMapping.ColumnMappings.Add("Desc_DatoReset", "Desc_DatoReset")
            tableMapping.ColumnMappings.Add("Valor", "Valor")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Interflet.MySettings.Default.ProduccionInterfletdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.UP_ReporteReset"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Viaje", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ProduccionInterfletdbReportes.UP_ReporteResetDataTable, ByVal Viaje As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Viaje.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Viaje.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Viaje As Global.System.Nullable(Of Integer)) As ProduccionInterfletdbReportes.UP_ReporteResetDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Viaje.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Viaje.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ProduccionInterfletdbReportes.UP_ReporteResetDataTable = New ProduccionInterfletdbReportes.UP_ReporteResetDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
