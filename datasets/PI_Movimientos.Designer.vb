'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("PI_Movimientos"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class PI_Movimientos
    Inherits Global.System.Data.DataSet
    
    Private tableUP_Consulta_Movimientos As UP_Consulta_MovimientosDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UP_Consulta_Movimientos")) Is Nothing) Then
                MyBase.Tables.Add(New UP_Consulta_MovimientosDataTable(ds.Tables("UP_Consulta_Movimientos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UP_Consulta_Movimientos() As UP_Consulta_MovimientosDataTable
        Get
            Return Me.tableUP_Consulta_Movimientos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As PI_Movimientos = CType(MyBase.Clone,PI_Movimientos)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("UP_Consulta_Movimientos")) Is Nothing) Then
                MyBase.Tables.Add(New UP_Consulta_MovimientosDataTable(ds.Tables("UP_Consulta_Movimientos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableUP_Consulta_Movimientos = CType(MyBase.Tables("UP_Consulta_Movimientos"),UP_Consulta_MovimientosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUP_Consulta_Movimientos) Is Nothing) Then
                Me.tableUP_Consulta_Movimientos.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "PI_Movimientos"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/PI_Movimientos.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableUP_Consulta_Movimientos = New UP_Consulta_MovimientosDataTable
        MyBase.Tables.Add(Me.tableUP_Consulta_Movimientos)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUP_Consulta_Movimientos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As PI_Movimientos = New PI_Movimientos
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub UP_Consulta_MovimientosRowChangeEventHandler(ByVal sender As Object, ByVal e As UP_Consulta_MovimientosRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UP_Consulta_MovimientosDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnHora As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnlugar As Global.System.Data.DataColumn
        
        Private columnContenedor1 As Global.System.Data.DataColumn
        
        Private columnContenedor2 As Global.System.Data.DataColumn
        
        Private columnMovim As Global.System.Data.DataColumn
        
        Private columncontenedor11 As Global.System.Data.DataColumn
        
        Private columnContenedor22 As Global.System.Data.DataColumn
        
        Private columnTamano1 As Global.System.Data.DataColumn
        
        Private columnTamano2 As Global.System.Data.DataColumn
        
        Private columnTamano11 As Global.System.Data.DataColumn
        
        Private columntamano22 As Global.System.Data.DataColumn
        
        Private columnRemolque1 As Global.System.Data.DataColumn
        
        Private columnRemolque2 As Global.System.Data.DataColumn
        
        Private columnTipoRem1 As Global.System.Data.DataColumn
        
        Private columnTipoRem2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UP_Consulta_Movimientos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property lugarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlugar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contenedor1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnContenedor1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contenedor2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnContenedor2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MovimColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMovim
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property contenedor11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columncontenedor11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Contenedor22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnContenedor22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tamano1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTamano1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tamano2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTamano2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tamano11Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTamano11
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tamano22Column() As Global.System.Data.DataColumn
            Get
                Return Me.columntamano22
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Remolque1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemolque1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Remolque2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemolque2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoRem1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoRem1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoRem2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoRem2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UP_Consulta_MovimientosRow
            Get
                Return CType(Me.Rows(index),UP_Consulta_MovimientosRow)
            End Get
        End Property
        
        Public Event UP_Consulta_MovimientosRowChanging As UP_Consulta_MovimientosRowChangeEventHandler
        
        Public Event UP_Consulta_MovimientosRowChanged As UP_Consulta_MovimientosRowChangeEventHandler
        
        Public Event UP_Consulta_MovimientosRowDeleting As UP_Consulta_MovimientosRowChangeEventHandler
        
        Public Event UP_Consulta_MovimientosRowDeleted As UP_Consulta_MovimientosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUP_Consulta_MovimientosRow(ByVal row As UP_Consulta_MovimientosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUP_Consulta_MovimientosRow( _
                    ByVal Fecha As Date,  _
                    ByVal Hora As String,  _
                    ByVal Tipo As String,  _
                    ByVal lugar As String,  _
                    ByVal Contenedor1 As String,  _
                    ByVal Contenedor2 As String,  _
                    ByVal Movim As String,  _
                    ByVal contenedor11 As String,  _
                    ByVal Contenedor22 As String,  _
                    ByVal Tamano1 As String,  _
                    ByVal Tamano2 As String,  _
                    ByVal Tamano11 As String,  _
                    ByVal tamano22 As String,  _
                    ByVal Remolque1 As String,  _
                    ByVal Remolque2 As String,  _
                    ByVal TipoRem1 As String,  _
                    ByVal TipoRem2 As String) As UP_Consulta_MovimientosRow
            Dim rowUP_Consulta_MovimientosRow As UP_Consulta_MovimientosRow = CType(Me.NewRow,UP_Consulta_MovimientosRow)
            Dim columnValuesArray() As Object = New Object() {Fecha, Hora, Tipo, lugar, Contenedor1, Contenedor2, Movim, contenedor11, Contenedor22, Tamano1, Tamano2, Tamano11, tamano22, Remolque1, Remolque2, TipoRem1, TipoRem2}
            rowUP_Consulta_MovimientosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUP_Consulta_MovimientosRow)
            Return rowUP_Consulta_MovimientosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UP_Consulta_MovimientosDataTable = CType(MyBase.Clone,UP_Consulta_MovimientosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UP_Consulta_MovimientosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnHora = MyBase.Columns("Hora")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnlugar = MyBase.Columns("lugar")
            Me.columnContenedor1 = MyBase.Columns("Contenedor1")
            Me.columnContenedor2 = MyBase.Columns("Contenedor2")
            Me.columnMovim = MyBase.Columns("Movim")
            Me.columncontenedor11 = MyBase.Columns("contenedor11")
            Me.columnContenedor22 = MyBase.Columns("Contenedor22")
            Me.columnTamano1 = MyBase.Columns("Tamano1")
            Me.columnTamano2 = MyBase.Columns("Tamano2")
            Me.columnTamano11 = MyBase.Columns("Tamano11")
            Me.columntamano22 = MyBase.Columns("tamano22")
            Me.columnRemolque1 = MyBase.Columns("Remolque1")
            Me.columnRemolque2 = MyBase.Columns("Remolque2")
            Me.columnTipoRem1 = MyBase.Columns("TipoRem1")
            Me.columnTipoRem2 = MyBase.Columns("TipoRem2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnHora = New Global.System.Data.DataColumn("Hora", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHora)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnlugar = New Global.System.Data.DataColumn("lugar", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlugar)
            Me.columnContenedor1 = New Global.System.Data.DataColumn("Contenedor1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContenedor1)
            Me.columnContenedor2 = New Global.System.Data.DataColumn("Contenedor2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContenedor2)
            Me.columnMovim = New Global.System.Data.DataColumn("Movim", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMovim)
            Me.columncontenedor11 = New Global.System.Data.DataColumn("contenedor11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontenedor11)
            Me.columnContenedor22 = New Global.System.Data.DataColumn("Contenedor22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContenedor22)
            Me.columnTamano1 = New Global.System.Data.DataColumn("Tamano1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTamano1)
            Me.columnTamano2 = New Global.System.Data.DataColumn("Tamano2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTamano2)
            Me.columnTamano11 = New Global.System.Data.DataColumn("Tamano11", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTamano11)
            Me.columntamano22 = New Global.System.Data.DataColumn("tamano22", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntamano22)
            Me.columnRemolque1 = New Global.System.Data.DataColumn("Remolque1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemolque1)
            Me.columnRemolque2 = New Global.System.Data.DataColumn("Remolque2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemolque2)
            Me.columnTipoRem1 = New Global.System.Data.DataColumn("TipoRem1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoRem1)
            Me.columnTipoRem2 = New Global.System.Data.DataColumn("TipoRem2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoRem2)
            Me.columnHora.MaxLength = 5
            Me.columnTipo.MaxLength = 1
            Me.columnlugar.MaxLength = 10
            Me.columnContenedor1.MaxLength = 20
            Me.columnContenedor2.MaxLength = 20
            Me.columncontenedor11.MaxLength = 20
            Me.columnContenedor22.MaxLength = 20
            Me.columnTamano1.MaxLength = 3
            Me.columnTamano2.MaxLength = 3
            Me.columnTamano11.MaxLength = 3
            Me.columntamano22.MaxLength = 3
            Me.columnRemolque1.MaxLength = 10
            Me.columnRemolque2.MaxLength = 10
            Me.columnTipoRem1.MaxLength = 20
            Me.columnTipoRem2.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUP_Consulta_MovimientosRow() As UP_Consulta_MovimientosRow
            Return CType(Me.NewRow,UP_Consulta_MovimientosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UP_Consulta_MovimientosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UP_Consulta_MovimientosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UP_Consulta_MovimientosRowChangedEvent) Is Nothing) Then
                RaiseEvent UP_Consulta_MovimientosRowChanged(Me, New UP_Consulta_MovimientosRowChangeEvent(CType(e.Row,UP_Consulta_MovimientosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UP_Consulta_MovimientosRowChangingEvent) Is Nothing) Then
                RaiseEvent UP_Consulta_MovimientosRowChanging(Me, New UP_Consulta_MovimientosRowChangeEvent(CType(e.Row,UP_Consulta_MovimientosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UP_Consulta_MovimientosRowDeletedEvent) Is Nothing) Then
                RaiseEvent UP_Consulta_MovimientosRowDeleted(Me, New UP_Consulta_MovimientosRowChangeEvent(CType(e.Row,UP_Consulta_MovimientosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UP_Consulta_MovimientosRowDeletingEvent) Is Nothing) Then
                RaiseEvent UP_Consulta_MovimientosRowDeleting(Me, New UP_Consulta_MovimientosRowChangeEvent(CType(e.Row,UP_Consulta_MovimientosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUP_Consulta_MovimientosRow(ByVal row As UP_Consulta_MovimientosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As PI_Movimientos = New PI_Movimientos
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UP_Consulta_MovimientosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UP_Consulta_MovimientosRow
        Inherits Global.System.Data.DataRow
        
        Private tableUP_Consulta_Movimientos As UP_Consulta_MovimientosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUP_Consulta_Movimientos = CType(Me.Table,UP_Consulta_MovimientosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Fecha' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hora() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.HoraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hora' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.HoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tipo' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property lugar() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.lugarColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lugar' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.lugarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contenedor1() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.Contenedor1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contenedor1' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.Contenedor1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contenedor2() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.Contenedor2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contenedor2' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.Contenedor2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Movim() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.MovimColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Movim' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.MovimColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property contenedor11() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.contenedor11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'contenedor11' in table 'UP_Consulta_Movimientos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.contenedor11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contenedor22() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.Contenedor22Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Contenedor22' in table 'UP_Consulta_Movimientos' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.Contenedor22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tamano1() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.Tamano1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tamano1' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.Tamano1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tamano2() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.Tamano2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tamano2' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.Tamano2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tamano11() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.Tamano11Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Tamano11' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.Tamano11Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tamano22() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.tamano22Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'tamano22' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.tamano22Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remolque1() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.Remolque1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remolque1' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.Remolque1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remolque2() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.Remolque2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remolque2' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.Remolque2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoRem1() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.TipoRem1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoRem1' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.TipoRem1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoRem2() As String
            Get
                Try 
                    Return CType(Me(Me.tableUP_Consulta_Movimientos.TipoRem2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TipoRem2' in table 'UP_Consulta_Movimientos' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUP_Consulta_Movimientos.TipoRem2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tableUP_Consulta_Movimientos.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHoraNull() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.HoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHoraNull()
            Me(Me.tableUP_Consulta_Movimientos.HoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tableUP_Consulta_Movimientos.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslugarNull() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.lugarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlugarNull()
            Me(Me.tableUP_Consulta_Movimientos.lugarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContenedor1Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.Contenedor1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContenedor1Null()
            Me(Me.tableUP_Consulta_Movimientos.Contenedor1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContenedor2Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.Contenedor2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContenedor2Null()
            Me(Me.tableUP_Consulta_Movimientos.Contenedor2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMovimNull() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.MovimColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMovimNull()
            Me(Me.tableUP_Consulta_Movimientos.MovimColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Iscontenedor11Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.contenedor11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setcontenedor11Null()
            Me(Me.tableUP_Consulta_Movimientos.contenedor11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContenedor22Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.Contenedor22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContenedor22Null()
            Me(Me.tableUP_Consulta_Movimientos.Contenedor22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTamano1Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.Tamano1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTamano1Null()
            Me(Me.tableUP_Consulta_Movimientos.Tamano1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTamano2Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.Tamano2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTamano2Null()
            Me(Me.tableUP_Consulta_Movimientos.Tamano2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTamano11Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.Tamano11Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTamano11Null()
            Me(Me.tableUP_Consulta_Movimientos.Tamano11Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Istamano22Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.tamano22Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Settamano22Null()
            Me(Me.tableUP_Consulta_Movimientos.tamano22Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemolque1Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.Remolque1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemolque1Null()
            Me(Me.tableUP_Consulta_Movimientos.Remolque1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemolque2Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.Remolque2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemolque2Null()
            Me(Me.tableUP_Consulta_Movimientos.Remolque2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoRem1Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.TipoRem1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoRem1Null()
            Me(Me.tableUP_Consulta_Movimientos.TipoRem1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoRem2Null() As Boolean
            Return Me.IsNull(Me.tableUP_Consulta_Movimientos.TipoRem2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoRem2Null()
            Me(Me.tableUP_Consulta_Movimientos.TipoRem2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UP_Consulta_MovimientosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UP_Consulta_MovimientosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UP_Consulta_MovimientosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UP_Consulta_MovimientosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace PI_MovimientosTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UP_Consulta_MovimientosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UP_Consulta_Movimientos"
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Hora", "Hora")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("lugar", "lugar")
            tableMapping.ColumnMappings.Add("Contenedor1", "Contenedor1")
            tableMapping.ColumnMappings.Add("Contenedor2", "Contenedor2")
            tableMapping.ColumnMappings.Add("Movim", "Movim")
            tableMapping.ColumnMappings.Add("contenedor11", "contenedor11")
            tableMapping.ColumnMappings.Add("Contenedor22", "Contenedor22")
            tableMapping.ColumnMappings.Add("Tamano1", "Tamano1")
            tableMapping.ColumnMappings.Add("Tamano2", "Tamano2")
            tableMapping.ColumnMappings.Add("Tamano11", "Tamano11")
            tableMapping.ColumnMappings.Add("tamano22", "tamano22")
            tableMapping.ColumnMappings.Add("Remolque1", "Remolque1")
            tableMapping.ColumnMappings.Add("Remolque2", "Remolque2")
            tableMapping.ColumnMappings.Add("TipoRem1", "TipoRem1")
            tableMapping.ColumnMappings.Add("TipoRem2", "TipoRem2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Interflet.MySettings.Default.ProduccionInterfletdbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.UP_Consulta_Movimientos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unidad", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Fecha", Global.System.Data.SqlDbType.SmallDateTime, 4, Global.System.Data.ParameterDirection.Input, 16, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As PI_Movimientos.UP_Consulta_MovimientosDataTable, ByVal Unidad As String, ByVal Fecha As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Unidad Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Unidad,String)
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Unidad As String, ByVal Fecha As Global.System.Nullable(Of Date)) As PI_Movimientos.UP_Consulta_MovimientosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Unidad Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Unidad,String)
            End If
            If (Fecha.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Fecha.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As PI_Movimientos.UP_Consulta_MovimientosDataTable = New PI_Movimientos.UP_Consulta_MovimientosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
